diff --git a/app/controllers/application.rb b/app/controllers/application.rb
index afbec49..a11dc0b 100644
--- a/app/controllers/application.rb
+++ b/app/controllers/application.rb
@@ -26,15 +26,15 @@ class ApplicationController < ActionController::Base
     
     def current_user
       return @current_user if defined?(@current_user)
-      @current_user = current_user_session && current_user_session.user
+      @current_user = current_user_session && current_user_session.invision_user
     end
     
     def require_admin
       if current_user
         unless @current_user.is_admin?
           flash[:error] = "You do not have permission to access that page."
-          # TODO: Redirect to our 'Jugg.php' equivalent or to this user's member page
-          redirect_to(members_path)
+          # TODO: Redirect to this user's member page
+          # redirect_to(member_path(...))
         end
       else
         return require_user
@@ -44,7 +44,7 @@ class ApplicationController < ActionController::Base
     def require_user
       unless current_user
         store_location
-        flash[:error] = "You must be logged in to access this page."
+        flash[:error] = "You must be logged in to access that page."
         redirect_to(new_user_session_url)
         return false
       end
@@ -53,8 +53,8 @@ class ApplicationController < ActionController::Base
     def require_no_user
       if current_user
         store_location
-        flash[:error] = "You cannot access this page while logged in."
-        redirect_to(account_url)
+        # TODO: Redirect to summary page
+        # redirect_to(member_path(...))
         return false
       end
     end
diff --git a/app/controllers/punishments_controller.rb b/app/controllers/punishments_controller.rb
index 81eba34..909c3ed 100644
--- a/app/controllers/punishments_controller.rb
+++ b/app/controllers/punishments_controller.rb
@@ -1,7 +1,7 @@
 class PunishmentsController < ApplicationController
   layout @@layout
   
-  before_filter :require_admin, :only => [:new, :edit, :create, :update, :destroy]
+  before_filter :require_admin
   
   before_filter :find_parent
   before_filter :find_punishment, :only => [:edit, :update, :destroy]
diff --git a/app/controllers/user_sessions_controller.rb b/app/controllers/user_sessions_controller.rb
index 15e489b..cf3bf70 100644
--- a/app/controllers/user_sessions_controller.rb
+++ b/app/controllers/user_sessions_controller.rb
@@ -11,7 +11,7 @@ class UserSessionsController < ApplicationController
     
     if @user_session.save
       flash[:success] = "Login successful!"
-      redirect_back_or_default account_url
+      redirect_back_or_default members_url
     else
       render :action => :new
     end
diff --git a/app/models/invision_user.rb b/app/models/invision_user.rb
index cc88b3a..87ee008 100644
--- a/app/models/invision_user.rb
+++ b/app/models/invision_user.rb
@@ -67,49 +67,57 @@
 
 class InvisionUser < ActiveRecord::Base
   set_table_name "ibf_members"
+
+  # Authlogic -----------------------------------------------------------------
+  attr_accessible :login, :password, :password_confirmation
+  acts_as_authentic(
+    :crypto_provider  => Authlogic::CryptoProviders::InvisionPowerBoard, 
+    :login_field      => :members_l_username,
+    :login_field_type => :login,
+    :validate_login_field => false # FIXME: Doesn't work? Still get "Member l username does not exist" for invalid names
+  )
   
-  # Relationships -------------------------------------------------------------
-  has_one :converge, :class_name => "InvisionUserConverge", :foreign_key => "converge_id"
+  def crypted_password
+    self.converge.converge_pass_hash
+  end
+  def password_salt
+    self.converge.converge_pass_salt
+  end
   
-  # Attributes ----------------------------------------------------------------
-  # Validations ---------------------------------------------------------------
-  # Callbacks -----------------------------------------------------------------
+  def persistence_token
+    self.user.persistence_token
+  end
+  def persistence_token=(value)
+    self.user.persistence_token = value
+    self.user.save
+  end
   
-  # Class Methods -------------------------------------------------------------
-  def self.generate_hash(raw_password, salt)
-    raw_password = self.filter(raw_password)
-    
-    require 'digest/md5'
-    return Digest::MD5.hexdigest(Digest::MD5.hexdigest(salt) + 
-      Digest::MD5.hexdigest(raw_password))
+  def self.find_by_persistence_token(token)
+    user = User.find_by_persistence_token(token)
+    return user.invision_user unless user.nil?
   end
   
-  # Instance Methods ----------------------------------------------------------
-  def auth?(raw_password)
-    self.converge.converge_pass_hash == InvisionUser.generate_hash(raw_password, 
-      self.converge.converge_pass_salt)
+  def is_admin?
+    self.user.is_admin?
   end
   
+  # ---------------------------------------------------------------------------
+  # Override some AR methods; we don't want to mess with Invision's integrity
+  def destroy; end
+  def delete; end
+  def self.destroy_all; end
+  def self.delete_all; end
+  
+  # Relationships -------------------------------------------------------------
+  has_one :converge, :class_name => "InvisionUserConverge", :foreign_key => "converge_id"
+  has_one :user
+  
+  # Callbacks -----------------------------------------------------------------
+  before_create :create_or_update_user
+  before_save :create_or_update_user
+  
   private
-    def self.filter(input)
-      # Invision's input filtering replaces a bunch of characters, some of which 
-      # may be used in a strong password. We have to apply the same changes so 
-      # that the md5'd string ends up the same
-      input.gsub!('&[^amp;]?', '&amp;')
-      input.gsub!('<!--', '&#60;&#33;--')
-      input.gsub!('-->', '--&#62;')
-      input.gsub!(/<script/i, '&#60;script')
-      input.gsub!('>', '&gt;')
-      input.gsub!('<', '&lt;')
-      input.gsub!('"', '&quot;')
-      input.gsub!("\\\$", '&#036;')
-      input.gsub!('!', '&#33;')
-      input.gsub!("'", '&#39;')
-      
-      # NOTE: Invision does these, but we're not real worried about them
-      # input.gsub!("\n", '<br />')
-      # input.gsub!("\r", '')
-      
-      input
+    def create_or_update_user
+      self.user = User.new if self.user.nil?
     end
-end
+end
\ No newline at end of file
diff --git a/app/models/user.rb b/app/models/user.rb
index 79e9e0d..dd0c9c1 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -19,7 +19,5 @@
 #
 
 class User < ActiveRecord::Base
-  acts_as_authentic
-  
-  attr_accessible :login, :password, :password_confirmation
+  belongs_to :invision_user
 end
diff --git a/app/models/user_session.rb b/app/models/user_session.rb
index 8c19d19..6ec44ce 100644
--- a/app/models/user_session.rb
+++ b/app/models/user_session.rb
@@ -1,2 +1,3 @@
 class UserSession < Authlogic::Session::Base
+  authenticate_with InvisionUser
 end
\ No newline at end of file
diff --git a/app/views/layouts/application.html.haml b/app/views/layouts/application.html.haml
index 109c464..ae4456c 100644
--- a/app/views/layouts/application.html.haml
+++ b/app/views/layouts/application.html.haml
@@ -28,12 +28,12 @@
             %li= link_to 'Raids', raids_path, :class => ( controller.controller_name == 'raids' ) ? 'selected' : ''
             = # TODO: FIXME
             - if current_user && current_user.is_admin?
-              %li= link_to 'Users', users_path, :class => ( controller.controller_name == 'users' ) ? 'selected' : ''
+              / %li= link_to 'Users', users_path, :class => ( controller.controller_name == 'users' ) ? 'selected' : ''
             - if current_user
-              %li= link_to 'My Account', account_path
+              / %li= link_to 'My Account', account_path
               %li= link_to 'Logout', user_session_path, :method => :delete, :confirm => 'Are you sure you want to log out?'
             - else
-              %li= link_to 'Register', new_account_path
+              / %li= link_to 'Register', new_account_path
               %li= link_to 'Log In', new_user_session_path
       #main
         - if flash[:success]
diff --git a/app/views/user_sessions/new.html.haml b/app/views/user_sessions/new.html.haml
index 2bfeb18..0080562 100644
--- a/app/views/user_sessions/new.html.haml
+++ b/app/views/user_sessions/new.html.haml
@@ -7,7 +7,7 @@
       .error= f.error_messages
 
     = f.label :login
-    = f.text_field :login, :class => 'large'
+    = f.text_field :members_l_username, :class => 'large'
 
     = f.label :password
     = f.password_field :password, :class => 'large'
diff --git a/config/routes.rb b/config/routes.rb
index 7d99289..39035c3 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -4,8 +4,8 @@ ActionController::Routing::Routes.draw do |map|
   map.resources :members, :has_many => [ :punishments ]
   
   map.resource :user_session
-  map.resource :account, :controller => 'users'
-  map.resources :users
+  # map.resource :account, :controller => 'users'
+  # map.resources :users
 
   map.connect ':controller/:action/:id'
   map.connect ':controller/:action/:id.:format'
diff --git a/vendor/plugins/authlogic/lib/authlogic.rb b/vendor/plugins/authlogic/lib/authlogic.rb
index d419c61..0446859 100644
--- a/vendor/plugins/authlogic/lib/authlogic.rb
+++ b/vendor/plugins/authlogic/lib/authlogic.rb
@@ -11,6 +11,7 @@ require File.dirname(__FILE__) + "/authlogic/crypto_providers/sha1"
 require File.dirname(__FILE__) + "/authlogic/crypto_providers/sha512"
 require File.dirname(__FILE__) + "/authlogic/crypto_providers/bcrypt"
 require File.dirname(__FILE__) + "/authlogic/crypto_providers/aes256"
+require File.dirname(__FILE__) + "/authlogic/crypto_providers/invision"
 
 if defined?(ActiveRecord)
   require File.dirname(__FILE__) + "/authlogic/orm_adapters/active_record_adapter/acts_as_authentic/base"
